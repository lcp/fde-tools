#
#   Copyright (C) 2023 SUSE LLC
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Written by Gary Lin <glin@suse.com>

. $SHAREDIR/commands/add-secondary-key
. $SHAREDIR/commands/tpm-enable

alias cmd_requires_luks_device=true
alias cmd_perform=cmd_regenerate_key

function cmd_regenerate_key {
    luks_dev="$1"

    # Get the current keyslots for the TPM sealed key
    KEYSLOTS_TO_BE_WIPED=$(bootloader_get_keyslots ${luks_dev})

    # Create the new key to be sealed
    if [[ "$FDE_USE_AUTHORIZED_POLICIES" =~ y.* ]]; then
	luks_new_keyfile="$(fde_make_tempfile newkey)"
	if ! init_authorized_policy || ! add_secondary_key "$luks_dev" "$luks_new_keyfile"; then
	    rm -f "$luks_new_keyfile"
	    return 1
	fi

	tpm_set_authorized_policy_paths "$FDE_AUTHORIZED_POLICY"
	if ! tpm_seal_secret "$luks_new_keyfile" "$FDE_AP_SEALED_SECRET" "$FDE_AP_AUTHPOLICY"; then
	    display_errorbox "Failed to seal secondary LUKS key against TPM Authorized Policy"
	    rm -f "$luks_new_keyfile"
	    return 1
	fi

	rm -f "$luks_new_keyfile"
    else
	if [ -z "$opt_keyfile" ]; then
	    opt_keyfile="/etc/fde/root.key"
	fi

	if ! add_secondary_key "$luks_dev" "$opt_keyfile"; then
	    return 1
	fi

	# Leave the keyfile around so that tpm-enable can seal it on the next reboot
	echo "Leaving secondary key in $opt_keyfile"
	fde_set_variable FDE_ENROLL_NEW_KEY "$opt_keyfile"
    fi

    # Finish TPM key sealing
    tpm_enable ${luks_dev}

    # Remove the previous keyslot
    if [ -n "${KEYSLOTS_TO_BE_WIPED}" ]; then
        bootloader_remove_keyslots "${luks_dev}" "${KEYSLOTS_TO_BE_WIPED}"
        if [ "$?" -ne 0 ]; then
            display_errorbox "Failed to wipe out key slots: ${KEYSLOTS_TO_BE_WIPED}"
            return  1
        fi
    fi

    return 0
}
